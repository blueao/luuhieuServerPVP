package Calculate;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class LogicHelper {

	 private static LogicHelper instance = null;
	 protected LogicHelper() {}
	   public static LogicHelper getInstance() {
		      if(instance == null) {
		         instance = new LogicHelper();
		      }
		      return instance;
		   }
	public static <T> T[] append(T[] arr, T element) {
	    final int N = arr.length;
	    arr = Arrays.copyOf(arr, N + 1);
	    arr[N] = element;
	    return arr;
	}
	public int[] append(int[] items, int indexItems) {
	     final int N = items.length;
		items = Arrays.copyOf(items, N + 1);
	    items[N] = indexItems;
	    return items;
	}
	public byte[] integersToBytes(int[] values)
	{
	   ByteArrayOutputStream baos = new ByteArrayOutputStream();
	   DataOutputStream dos = new DataOutputStream(baos);
	   for(int i=0; i < values.length; ++i)
	   {
	        try {
				dos.writeInt(values[i]);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	   }

	   return baos.toByteArray();
	} 
	public int[] ConvertByteToIntegerArray(byte[] Objbyte)
	{
		
		  ByteArrayOutputStream out = new ByteArrayOutputStream();
	         DataInputStream dataIs = new DataInputStream(new ByteArrayInputStream(out.toByteArray());
	         while(dataIs.available()>0)
	         {

	            int[] k = dataIs.readInt();
	         }
	         return k;
	}
}
